// Usage: node scripts/generate-score-factors.js
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const factorsPath = path.join(__dirname, '../score-factors.json');
const tsOutPath = path.join(__dirname, '../src/constants/score.ts');
const goOutPath = path.join(__dirname, '../server/handler/score.go');

const factors = JSON.parse(fs.readFileSync(factorsPath, 'utf8'));

// TypeScript output
const tsContent = `
// Do not edit this file directly
// Edit score-factors.json instead
// Use npm run generate-score-factors to update it
const SCORE = {
  PR_FACTOR: ${factors.PR_FACTOR},
  REVIEWED_MR_FACTOR: ${factors.REVIEWED_MR_FACTOR},
  ISSUES_FACTOR: ${factors.ISSUES_FACTOR},
  COMMIT_FACTOR: ${factors.COMMIT_FACTOR},
};

export default SCORE;
`;
fs.writeFileSync(tsOutPath, tsContent);

// Go output
const goContent = `package handler

// Score factors (generated from score-factors.json)
// Do not edit this file directly
// Use npm run generate-score-factors to update it
const (
	CommitFactor     = ${factors.COMMIT_FACTOR}
	IssueFactor      = ${factors.ISSUES_FACTOR}
	PRFactor         = ${factors.PR_FACTOR}
	ReviewedMRFactor = ${factors.REVIEWED_MR_FACTOR}
)
`;

// Read existing Go file to preserve CalculateScore function
let goExisting = '';
if (fs.existsSync(goOutPath)) {
  const lines = fs.readFileSync(goOutPath, 'utf8').split('\n');
  const idx = lines.findIndex(l => l.includes('func CalculateScore'));
  if (idx !== -1) {
    goExisting = '\n' + lines.slice(idx).join('\n');
  }
}
fs.writeFileSync(goOutPath, goContent + goExisting);

console.log('Generated score.ts and score.go from score-factors.json');
