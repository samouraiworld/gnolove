// Usage: node scripts/generate-score-factors.js
/* eslint-disable */
const fs = require('fs');
const path = require('path');

const factorsPath = path.join(__dirname, '../score-factors.json');
const tsOutPath = path.join(__dirname, '../src/constants/score.ts');
const goOutPath = path.join(__dirname, '../server/handler/score.go');

let factors;
try {
  factors = JSON.parse(fs.readFileSync(factorsPath, 'utf8'));
} catch (err) {
  console.error('Error reading or parsing score-factors.json:', err.message);
  process.exit(1);
}

// Validate that all factor values are numbers
const requiredKeys = ['COMMIT_FACTOR', 'ISSUES_FACTOR', 'PR_FACTOR', 'REVIEWED_MR_FACTOR'];
for (const key of requiredKeys) {
  if (!(key in factors)) {
    console.error(`Missing required factor: ${key}`);
    process.exit(1);
  }
  if (typeof factors[key] !== 'number' || !isFinite(factors[key])) {
    console.error(`Invalid value for ${key}: must be a finite number, got '${factors[key]}'`);
    process.exit(1);
  }
}

// TypeScript output
const tsContent = `
// Do not edit this file directly
// Edit score-factors.json instead
// Use npm run generate-score-factors to update it
const SCORE = {
  PR_FACTOR: ${factors.PR_FACTOR},
  REVIEWED_MR_FACTOR: ${factors.REVIEWED_MR_FACTOR},
  ISSUES_FACTOR: ${factors.ISSUES_FACTOR},
  COMMIT_FACTOR: ${factors.COMMIT_FACTOR},
};

export default SCORE;
`;
try {
  fs.writeFileSync(tsOutPath, tsContent);
} catch (err) {
  console.error('Error writing TypeScript output:', err.message);
  process.exit(1);
}

// Go output
const goContent = `package handler

// Score factors (generated from score-factors.json)
// Do not edit this file directly
// Use npm run generate-score-factors to update it
const (
	CommitFactor     = ${factors.COMMIT_FACTOR}
	IssueFactor      = ${factors.ISSUES_FACTOR}
	PRFactor         = ${factors.PR_FACTOR}
	ReviewedMRFactor = ${factors.REVIEWED_MR_FACTOR}
)
`;

// Read existing Go file to preserve CalculateScore function
let goExisting = '';
if (fs.existsSync(goOutPath)) {
  const content = fs.readFileSync(goOutPath, 'utf8');
  // Match function and its body using a more robust pattern
  const funcMatch = content.match(/(\nfunc\s+CalculateScore[\s\S]*?)(?=\nfunc|\n$)/);
  if (funcMatch) {
    goExisting = funcMatch[0];
  }
}
try {
  fs.writeFileSync(goOutPath, goContent + goExisting);
} catch (err) {
  console.error('Error writing Go output:', err.message);
  process.exit(1);
}

console.log('Generated score.ts and score.go from score-factors.json');
